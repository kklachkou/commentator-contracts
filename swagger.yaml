openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: Commentator API
  version: 0.0.1
servers:
  - url: https://commentator-boot-app.azurewebsites.net
    description: Commentator dev server
tags:
  - name: user
    description: Operations about user
paths:
  /v1/auth:
    post:
      tags:
        - auth
      summary: Authorize user
      operationId: authUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /v1/users:
    get:
      tags:
        - user
      summary: Fetch all users
      operationId: fetchUsers
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /v1/users:validate-username:
    post:
      tags:
        - user
      summary: Validate username uniqueness
      operationId: validateUsername
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserValidationRequest'
      responses:
        200:
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserValidationResponse'
  /v1/users/{userId}:
    get:
      tags:
        - user
      summary: Fetch user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id
      operationId: fetchUser
      responses:
        200:
          description: Single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
components:
  schemas:
    AuthRequest:
      type: object
      required:
        - source
        - token
      properties:
        source:
          type: string
          example: APPLE
        token:
          type: string
          example: SADFMWFKALFMSLKDFNLKSDF
    AuthResponse:
      type: object
      required:
        - id
        - username
        - authCode
      properties:
        id:
          type: string
          format: uuid
          example: LSALALLSAKDALKlaksdlKAS
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        description:
          type: string
          example: About Me
        authCode:
          type: string
          example: LKSDJFLKSJF
    UserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        description:
          type: string
          example: About Me
    UserResponse:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
          example: LSALALLSAKDALKlaksdlKAS
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        description:
          type: string
          example: About Me
    UserValidationRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: myusername22
    UserValidationResponse:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
          example: true 
