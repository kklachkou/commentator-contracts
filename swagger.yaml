openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: Commentator API
  version: 0.0.1
servers:
  - url: https://commentator-boot-app.azurewebsites.net
    description: Commentator dev server
tags:
  - name: auth
  - name: pages
  - name: user
  - name: theme
paths:
  /v1/auth:
    post:
      tags:
        - auth
      summary: Authorize user
      operationId: authUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: User authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /v1/pages:
    get:
      tags:
        - pages
      summary: Fetch all pages
      operationId: fetchPages
      responses:
        200:
          description: List of all pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageResponse'
    post:
      tags:
        - pages
      summary: Create page
      operationId: createPage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRequest'
      responses:
        201:
          description: User authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
  /v1/pages/{pageId}:
    get:
      tags:
        - pages
      summary: Fetch page
      operationId: fetchPage
      parameters:
        - in: path
          name: pageId
          schema:
            type: string
          required: true
          description: Page id
      responses:
        200:
          description: Page details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
  /v1/users:
    get:
      tags:
        - user
      summary: Fetch all users
      operationId: fetchUsers
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Authorization header
        - in: header
          name: X-USER-ID
          schema:
            type: string
          required: true
          description: Authorization header
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /v1/users/{userId}:
    get:
      tags:
        - user
      summary: Fetch user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Authorization header
        - in: header
          name: X-USER-ID
          schema:
            type: string
          required: true
          description: Authorization header
      operationId: fetchUser
      responses:
        200:
          description: Single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Authorization header
        - in: header
          name: X-USER-ID
          schema:
            type: string
          required: true
          description: Authorization header
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /v1/users:validate-username:
    post:
      tags:
        - user
      summary: Validate username uniqueness
      operationId: validateUsername
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Authorization header
        - in: header
          name: X-USER-ID
          schema:
            type: string
          required: true
          description: Authorization header
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserValidationRequest'
      responses:
        200:
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserValidationResponse'
  /v1/themes:
    get:
      tags:
        - theme
      summary: Fetch all themes
      operationId: fetchThemes
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Authorization header
        - in: header
          name: X-USER-ID
          schema:
            type: string
          required: true
          description: Authorization header
      responses:
        200:
          description: Themes fetched
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ThemeResponse'
  /v1/themes/{themeId}:
    get:
      tags:
        - theme
      summary: Fetch theme by id
      parameters:
      - in: path
        name: themeId
        schema:
          type: string
        required: true
      - in: header
        name: Authorization
        schema:
          type: string
        required: true
        description: Authorization header
      - in: header
        name: X-USER-ID
        schema:
          type: string
        required: true
        description: Authorization header
      operationId: fetchTheme
      responses:
        200:
          description: Theme fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: uuid
  schemas:
    AuthRequest:
      type: object
      required:
        - source
        - token
      properties:
        source:
          type: string
          example: APPLE
        token:
          type: string
          example: SADFMWFKALFMSLKDFNLKSDF
    AuthResponse:
      type: object
      required:
        - userId
        - token
      properties:
        userId:
          type: string
          format: uuid
          example: LSALALLSAKDALKlaksdlKAS
        token:
          type: string
          example: LKSDJFLKSJF
    PageRequest:
      type: object
      required:
        - uri
      properties:
        uri:
          type: string
          example: https://stackoverflow.com/
    PageResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: asASFSFAKDALKlaksdlKAS
        uri:
          type: string
          example: https://stackoverflow.com/
        name:
          type: string
          example: Stack Overflow
        title:
          type: string
          example: Stack Overflow - Where Developers Learn, Share, & Build Careers
        description:
          type: string
          example: Stack Overflow | The World's Largest Online Community for Developers
        image:
          type: string
          example: https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded
        shortcutIcon:
          type: string
          example: https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196
    UserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: TheUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        description:
          type: string
          example: About Me
        themeId:
          type: string
          format: uuid
          example: SDKLFJKSLDFJLSKDJFL
    UserResponse:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
          example: LSALALLSAKDALKlaksdlKAS
        username:
          type: string
          example: TheUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        description:
          type: string
          example: About Me
        themeId:
          type: string
          format: uuid
          example: SDKLFJKSLDFJLSKDJFL
    UserValidationRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: myusername22
    UserValidationResponse:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
          example: true
    ThemeResponse:      
          type: object      
          required:
            - id
            - name
            - dayColor
            - nightColor    
          properties:
            id:
              type: string
              format: uuid
              example: 'ASDKLFJSDLFKJSDLKFJSLD'
            name:
              type: string
              example: 'Barbie'
            dayColor:
              type: string
              example: '#FF57DA'
            nightColor:
              type: string
              example: '#D900A9'
